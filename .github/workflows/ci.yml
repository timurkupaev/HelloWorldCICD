name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest hello_world/tests/

  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t my-app:${{ github.sha }} .

      - name: Print all environment variables
        run: env

      - name: Проверка наличия секретов
        env:
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
        run: |
          if [ -z "${SERVER_USERNAME}" ]; then echo "SERVER_USERNAME не установлен"; else echo "SERVER_USERNAME установлен"; fi
          if [ -z "${SERVER_HOST}" ]; then echo "SERVER_HOST не установлен"; else echo "SERVER_HOST установлен"; fi
          if [ -z "${SSH_PRIVATE_KEY}" ]; then echo "SSH_PRIVATE_KEY не установлен"; else echo "SSH_PRIVATE_KEY установлен"; fi


      - name: Debug SSH connection
        run: |
          echo "Server Username: $SERVER_USERNAME"
          echo "Server Username: $SERVER_USERNAME"
          echo "Server Host: $SERVER_HOST"
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no -T $SERVER_USERNAME@$SERVER_HOST



      - name: Debug SSH Key
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          echo "Private key saved and permissions set"
          echo "${SSH_PRIVATE_KEY}" | head -n 4
          echo "${SSH_PRIVATE_KEY}" | tail -n 4
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Test SSH connection
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no -T $SERVER_USERNAME@$SERVER_HOST

      - name: Copy Docker image to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          # Убедитесь, что образ существует и его тег правильный
          docker images  # Печать всех доступных образов для проверки
          docker save my-app:${{ github.sha }} | gzip | ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "gunzip | docker load"
          rm private_key.pem

      - name: Deploy on server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST '
          docker-compose down &&
          docker-compose up -d &&
          docker logs <CONTAINER_NAME>
          '
          rm private_key.pem
