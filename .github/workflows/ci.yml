name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest hello_world/tests/

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME:${{ github.sha }} .

      - name: Copy Docker image to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          docker save $DOCKER_IMAGE_NAME:${{ github.sha }} | gzip | ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "gunzip | docker load"
          rm private_key.pem

      - name: Deploy on server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST '
          docker-compose down &&
          docker-compose up -d &&
          docker logs <CONTAINER_NAME>
          '
          rm private_key.pem
